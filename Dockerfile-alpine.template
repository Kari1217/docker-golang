{{ def alpine_version: env.variant | ltrimstr("alpine") -}}
FROM alpine:{{ alpine_version }}

RUN apk add --no-cache \
		ca-certificates

# set up nsswitch.conf for Go's "netgo" implementation
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf

ENV PATH /usr/local/go/bin:$PATH

ENV GOLANG_VERSION {{ .version }}

RUN set -eux; \
	apk add --no-cache --virtual .build-deps \
		bash \
		gcc \
		gnupg \
		go \
		musl-dev \
		openssl \
	; \
	apkArch="$(apk --print-arch)"; \
	case "$apkArch" in \
{{
	[
		.arches | to_entries[]
		| select(.value.supported)
		| .key as $bashbrewArch
		| (
			{
				amd64: "x86_64",
				arm32v6: "armhf",
				arm32v7: "armv7",
				arm64v8: "aarch64",
				i386: "x86",
				ppc64le: "ppc64le",
				s390x: "s390x",
			} | .[$bashbrewArch] // ""
		) as $apkArch
		| select($apkArch != "")
		| .value
		| (
-}}
		{{ $apkArch | @sh }}) \
			export {{ .env | to_entries | map(.key + "=" + (.value | @sh)) | join(" ") }}; \
			;; \
{{
		)
	] | add
-}}
		*) echo >&2 "error: unsupported architecture '$apkArch' (likely packaging update needed)"; exit 1 ;; \
	esac; \
	\
# https://github.com/golang/go/issues/38536#issuecomment-616897960
	url={{ .arches.src.url | @sh }}; \
	sha256={{ .arches.src.sha256 | @sh }}; \
	\
	wget -O go.tgz.asc "$url.asc"; \
	wget -O go.tgz "$url"; \
	echo "$sha256 *go.tgz" | sha256sum -c -; \
	\
# https://github.com/golang/go/issues/14739#issuecomment-324767697
	export GNUPGHOME="$(mktemp -d)"; \
# https://www.google.com/linuxrepositories/
	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC EC91 7721 F63B D38B 4796'; \
	gpg --batch --verify go.tgz.asc go.tgz; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME" go.tgz.asc; \
	\
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	( \
		cd /usr/local/go/src; \
# set GOROOT_BOOTSTRAP + GOHOST* such that we can build Go successfully
		export GOROOT_BOOTSTRAP="$(go env GOROOT)" GOHOSTOS="$GOOS" GOHOSTARCH="$GOARCH"; \
{{
	def need_386_hack:
		(env.version == "1.15" and alpine_version != "3.13")
		or (env.version != "1.15" and alpine_version == "3.13")
-}}
{{ if need_386_hack then ( -}}
		if [ -n "${GO386:-}" ]; then \
# https://github.com/docker-library/golang/issues/359 -> https://github.com/golang/go/issues/44500
# Go 1.15 + Alpine 3.14 == Go 1.16 bootstrap
# Go 1.16 + Alpine 3.13 == Go 1.15 bootstrap
# (once Go 1.15 *and* Alpine 3.13 go away, we can remove this)
			GO386= ./bootstrap.bash; \
			export GOROOT_BOOTSTRAP="/usr/local/go-$GOOS-$GOARCH-bootstrap"; \
			"$GOROOT_BOOTSTRAP/bin/go" version; \
		fi; \
{{ ) else "" end -}}
		./make.bash; \
{{ if need_386_hack then ( -}}
		if [ -n "${GO386:-}" ]; then \
			rm -rf "$GOROOT_BOOTSTRAP"; \
		fi; \
{{ ) else "" end -}}
	); \
	\
# pre-compile the standard library, just like the official binary release tarballs do
	go install std; \
# go install: -race is only supported on linux/amd64, linux/ppc64le, linux/arm64, freebsd/amd64, netbsd/amd64, darwin/amd64 and windows/amd64
#	go install -race std; \
	\
	apk del --no-network .build-deps; \
	\
# remove a few intermediate / bootstrapping files the official binary release tarballs do not contain
	rm -rf \
		/usr/local/go/pkg/*/cmd \
		/usr/local/go/pkg/bootstrap \
		/usr/local/go/pkg/obj \
		/usr/local/go/pkg/tool/*/api \
		/usr/local/go/pkg/tool/*/go_bootstrap \
		/usr/local/go/src/cmd/dist/dist \
	; \
	\
	go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
WORKDIR $GOPATH
