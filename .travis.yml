language: bash
services: docker

matrix:
  include:
    - os: windows
      dist: 1803-containers
      env: VERSION=1.12-rc VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=1.12-rc VARIANT=stretch
    - os: linux
      env: VERSION=1.12-rc VARIANT=alpine3.9
    - os: linux
      env: VERSION=1.12-rc VARIANT=alpine3.8
    - os: windows
      dist: 1803-containers
      env: VERSION=1.11 VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=1.11 VARIANT=stretch
    - os: linux
      env: VERSION=1.11 VARIANT=alpine3.9
    - os: linux
      env: VERSION=1.11 VARIANT=alpine3.8
    - os: windows
      dist: 1803-containers
      env: VERSION=1.10 VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=1.10 VARIANT=stretch
    - os: linux
      env: VERSION=1.10 VARIANT=alpine3.9
    - os: linux
      env: VERSION=1.10 VARIANT=alpine3.8

install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - env | sort
  - cd "$VERSION${VARIANT:+/$VARIANT}"
  - slash='/'; image="golang:$VERSION${VARIANT:+-${VARIANT//$slash/-}}"

script:
  - |
    (
      set -Eeuo pipefail
      set -x
      docker build -t "$image" .
      if [ "$TRAVIS_OS_NAME" = 'windows' ]; then
        # TODO make the tests run successfully on Windows too!
        docker run --rm "$image" go version
        docker run --rm "$image" git --version
      else
        ~/official-images/test/run.sh "$image"
      fi
    )

after_script:
  - docker images

# vim:set et ts=2 sw=2:
